// Generated file - do not edit!
// Source: html/portal.html
#pragma once
#include <pgmspace.h>
static const char PORTAL_HTML[] PROGMEM = "<!DOCTYPE html>\n"
"<html>\n"
"<head>\n"
"    <meta charset=\"UTF-8\">\n"
"    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n"
"    <title>Configure DeskHog</title>\n"
"    <style>\n"
":root {\n"
"    background-color: #E5E7DF;\n"
"    --border-color: #DCDED4;\n"
"    --container-color: #F3F4F0;\n"
"    --button-border: #CCCCCC;\n"
"    --button-border-hover: #AAA;\n"
"    --radius: 8px;\n"
"    --input-color: #FFF;\n"
"    --panel-color: #FFF;\n"
"    --label-color: #a0a0a0;\n"
"    --button-shadow: #E1DDDD;\n"
"    --default-font: system-ui, -apple-system, sans-serif; \n"
"    font-family: var(--default-font);\n"
"\n"
"}\n"
"\n"
"body { \n"
"    margin: 0; \n"
"    padding: 1rem; \n"
"    background-color: var(--container-color); \n"
"    color: #333; \n"
"    max-width: 70ch;\n"
"    margin-left: auto;\n"
"    margin-right: auto;\n"
"    border: 1px solid var(--border-color);\n"
"}\n"
"\n"
".tip {\n"
"    margin-top: 0px;\n"
"    font-weight: 400;\n"
"    font-size: 1rem;\n"
"}\n"
"\n"
".config-section {\n"
"    background-color: var(--panel-color);\n"
"    padding: 1rem;\n"
"    border-radius: var(--radius);\n"
"    margin-bottom: 1rem;\n"
"    border: 1px solid var(--border-color);\n"
"}\n"
"\n"
"\n"
"h1, h2 { color: #000000;\n"
"}\n"
"\n"
"h1 {\n"
"    font-weight: 700;\n"
"    font-size: 1.5rem;\n"
"\n"
"}\n"
"\n"
"h2 {\n"
"    font-weight: 600;\n"
"    font-size: 1.1rem;\n"
"    margin-bottom: 0.5rem;\n"
"}\n"
"\n"
".form-group { margin-bottom: 15px; }\n"
"label { \n"
"    display: block; \n"
"    margin-bottom: 0.5rem; \n"
"    font-weight: 600;\n"
"}\n"
"input[type='text'], input[type='password'] { \n"
"    width: 100%; \n"
"    padding: 8px; \n"
"    border: 1px solid #ddd; \n"
"    border-radius: 8px; \n"
"    box-sizing: border-box; \n"
"    font-size: 1rem;\n"
"}\n"
".button-container { \n"
"    margin-top: 15px; \n"
"    text-align: center; \n"
"}\n"
"button, select { \n"
"    display: inline-block; \n"
"    width: 100%;\n"
"    font-size: 16px;\n"
"    font-weight: 600;\n"
"    height: 40px;\n"
"    text-decoration: none; \n"
"    background-color: var(--input-color);\n"
"    border: 1px solid var(--button-border);\n"
"    border-radius: var(--radius); \n"
"    cursor: pointer; \n"
"    padding: 0 16px;\n"
"\n"
"    box-shadow: 0 4px 0 0 var(--button-shadow),\n"
"                0 5px 0 0 var(--button-border);\n"
"    color: inherit;\n"
"    -webkit-tap-highlight-color: transparent;\n"
"}\n"
"\n"
"input, select {\n"
"    height: 40px;\n"
"}\n"
"\n"
"button:active {\n"
"    background-color: #DCDDD9;\n"
"}\n"
"\n"
"ul {\n"
"    list-style: none;\n"
"    padding: 0;\n"
"    margin: 0;\n"
"}\n"
"\n"
"li {\n"
"    margin-bottom: 1rem;\n"
"}\n"
"\n"
"li:last-child {\n"
"    margin-bottom: 0;\n"
"}\n"
"\n"
"footer { \n"
"    text-align: center; \n"
"    margin-top: 4rem; \n"
"    color: #777; \n"
"    font-size: 0.8em; \n"
"}\n"
".network-list {\n"
"    max-height: 200px;\n"
"    overflow-y: auto;\n"
"    border: 1px solid #ddd;\n"
"    border-radius: 4px;\n"
"    margin-bottom: 15px;\n"
"}\n"
".network-item {\n"
"    padding: 8px 15px;\n"
"    border-bottom: 1px solid #eee;\n"
"    cursor: pointer;\n"
"}\n"
".network-item:hover {\n"
"    background-color: #f5f5f5;\n"
"}\n"
".network-item.selected {\n"
"    background-color: #e0f0ff;\n"
"}\n"
"\n"
".lock-icon {\n"
"    margin-left: 5px;\n"
"}\n"
".success-icon {\n"
"    color: #28a745;\n"
"    font-size: 48px;\n"
"    text-align: center;\n"
"    margin: 20px 0;\n"
"}\n"
".progress {\n"
"    height: 4px;\n"
"    background-color: #e9ecef;\n"
"    border-radius: 2px;\n"
"    margin: 20px 0;\n"
"    overflow: hidden;\n"
"}\n"
".progress-bar {\n"
"    height: 100%;\n"
"    background-color: #0066cc;\n"
"    width: 0%;\n"
"    transition: width 10s linear;\n"
"}\n"
".hidden {\n"
"    display: none;\n"
"}\n"
"\n"
"select {\n"
"    -webkit-appearance: none;\n"
"    -moz-appearance: none;\n"
"    appearance: none;\n"
"    background-image: url(\"data:image/svg+xml;charset=US-ASCII,%3Csvg xmlns='http://www.w3.org/2000/svg' width='24' height='24' viewBox='0 0 24 24' fill='none' stroke='%23333333' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'%3E%3Cpolyline points='6 9 12 15 18 9'%3E%3C/polyline%3E%3C/svg%3E\");\n"
"    background-repeat: no-repeat;\n"
"    background-position: right 0.7rem top 50%;\n"
"    background-size: 1rem auto;\n"
"    padding-right: 2rem;\n"
"    background-color: var(--input-color);\n"
"    font-family: var(--default-font);\n"
"}\n"
"\n"
"select::-ms-expand {\n"
"    display: none;\n"
"}\n"
"\n"
"/* Status message styling (used by global-action-status) */\n"
".status-message {\n"
"    padding: 0.75em;\n"
"    margin-bottom: 1em;\n"
"    border-radius: 4px;\n"
"    text-align: center;\n"
"    font-family: monospace; /* Added for fixed-width font */\n"
"}\n"
"\n"
".status-message.info {\n"
"    background-color: #e7f3fe; /* Light blue for info */\n"
"    border: 1px solid #d0eaff;\n"
"    color: #31708f;\n"
"}\n"
"\n"
".status-message.success {\n"
"    background-color: #d4edda; /* Light green for success */\n"
"    border: 1px solid #c3e6cb;\n"
"    color: #155724;\n"
"}\n"
"\n"
".status-message.error {\n"
"    background-color: #f8d7da; /* Light red for error */\n"
"    border: 1px solid #f5c6cb;\n"
"    color: #721c24;\n"
"}\n"
"\n"
"/* Release notes box specific styling */\n"
"#release-notes {\n"
"    /* Assuming .release-notes-box class already exists or you style #release-notes directly */\n"
"    /* If .release-notes-box is the primary selector for layout, add font-family there */\n"
"    /* For direct styling of the <pre> tag by ID: */\n"
"    font-family: monospace; /* Added for fixed-width font */\n"
"    white-space: pre-wrap;  /* Ensures long lines wrap */\n"
"    word-wrap: break-word;  /* Breaks long words if necessary */\n"
"    background-color: #f8f9fa; /* Light background for the box */\n"
"    border: 1px solid #dee2e6;   /* Border for the box */\n"
"    padding: 10px;              /* Padding inside the box */\n"
"    max-height: 200px;          /* Max height with scroll if content exceeds */\n"
"    overflow-y: auto;           /* Enable vertical scroll */\n"
"    border-radius: var(--radius); /* Consistent border radius */\n"
"}\n"
"</style>\n"
"    <script>\n"
"function showScreen(screenId) {\n"
"    const screens = ['config-screen', 'success-screen'];\n"
"    screens.forEach(id => {\n"
"        const el = document.getElementById(id);\n"
"        if (el) el.classList.add('hidden');\n"
"    });\n"
"    const screenToShow = document.getElementById(screenId);\n"
"    if (screenToShow) screenToShow.classList.remove('hidden');\n"
"    \n"
"    let title = \"DeskHog Configuration\";\n"
"    if (screenId === 'success-screen') {\n"
"        title = \"Configuration Saved\";\n"
"        startCountdown();\n"
"    }\n"
"    document.getElementById('page-title').textContent = title;\n"
"    \n"
"    if (screenId === 'success-screen') {\n"
"        startCountdown();\n"
"        document.getElementById('progress-bar').style.width = '100%';\n"
"    }\n"
"}\n"
"\n"
"// Handle WiFi form submission\n"
"function saveWifiConfig() {\n"
"    const form = document.getElementById('wifi-form');\n"
"    const formData = new FormData(form);\n"
"    const globalActionStatusEl = document.getElementById('global-action-status');\n"
"    \n"
"    fetch('/api/actions/save-wifi', { \n"
"        method: 'POST',\n"
"        body: formData\n"
"    })\n"
"    .then(response => response.json())\n"
"    .then(data => {\n"
"        if (data && data.status === 'queued') {\n"
"            console.log(\"Save WiFi action successfully queued.\", data.message);\n"
"            if (globalActionStatusEl) {\n"
"                globalActionStatusEl.textContent = data.message || \"Save WiFi initiated. Device will attempt to connect.\";\n"
"                globalActionStatusEl.className = 'status-message info';\n"
"                globalActionStatusEl.style.display = 'block';\n"
"                setTimeout(() => {\n"
"                    if (globalActionStatusEl.textContent === (data.message || \"Save WiFi initiated. Device will attempt to connect.\")) {\n"
"                        globalActionStatusEl.style.display = 'none';\n"
"                        globalActionStatusEl.textContent = '';\n"
"                        globalActionStatusEl.className = 'status-message';\n"
"                    }\n"
"                }, 5000);\n"
"            }\n"
"        } else {\n"
"            const errorMessage = (data && data.message) ? data.message : \"Failed to initiate WiFi save.\";\n"
"            console.error(\"Failed to initiate WiFi save:\", errorMessage);\n"
"            if (globalActionStatusEl) {\n"
"                globalActionStatusEl.textContent = errorMessage;\n"
"                globalActionStatusEl.className = 'status-message error';\n"
"                globalActionStatusEl.style.display = 'block';\n"
"                setTimeout(() => {\n"
"                    if (globalActionStatusEl.className.includes('error')) {\n"
"                        globalActionStatusEl.style.display = 'none';\n"
"                        globalActionStatusEl.textContent = '';\n"
"                        globalActionStatusEl.className = 'status-message';\n"
"                    }\n"
"                }, 7000);\n"
"            }\n"
"        }\n"
"    })\n"
"    .catch(() => {\n"
"        console.error(\"Communication error trying to save WiFi.\");\n"
"        if (globalActionStatusEl) {\n"
"            globalActionStatusEl.textContent = \"Communication error trying to save WiFi.\";\n"
"            globalActionStatusEl.className = 'status-message error';\n"
"            globalActionStatusEl.style.display = 'block';\n"
"            setTimeout(() => {\n"
"                if (globalActionStatusEl.className.includes('error')) {\n"
"                    globalActionStatusEl.style.display = 'none';\n"
"                    globalActionStatusEl.textContent = '';\n"
"                    globalActionStatusEl.className = 'status-message';\n"
"                }\n"
"            }, 7000);\n"
"        }\n"
"    });\n"
"    \n"
"    return false; \n"
"}\n"
"\n"
"// Handle device config form submission\n"
"function saveDeviceConfig() {\n"
"    const form = document.getElementById('device-form');\n"
"    const formData = new FormData(form);\n"
"    const globalActionStatusEl = document.getElementById('global-action-status');\n"
"    \n"
"    fetch('/api/actions/save-device-config', { \n"
"        method: 'POST',\n"
"        body: formData\n"
"    })\n"
"    .then(response => response.json())\n"
"    .then(data => {\n"
"        if (data && data.status === 'queued') {\n"
"            console.log(\"Save device config action successfully queued.\", data.message);\n"
"            if (globalActionStatusEl) {\n"
"                globalActionStatusEl.textContent = data.message || \"Device configuration save initiated.\";\n"
"                globalActionStatusEl.className = 'status-message info';\n"
"                globalActionStatusEl.style.display = 'block';\n"
"                setTimeout(() => {\n"
"                     if (globalActionStatusEl.textContent === (data.message || \"Device configuration save initiated.\")) {\n"
"                        globalActionStatusEl.style.display = 'none';\n"
"                        globalActionStatusEl.textContent = '';\n"
"                        globalActionStatusEl.className = 'status-message';\n"
"                    }\n"
"                }, 5000);\n"
"            }\n"
"        } else {\n"
"            const errorMessage = (data && data.message) ? data.message : \"Failed to initiate device config save.\";\n"
"            console.error(\"Failed to initiate device config save:\", errorMessage);\n"
"            if (globalActionStatusEl) {\n"
"                globalActionStatusEl.textContent = errorMessage;\n"
"                globalActionStatusEl.className = 'status-message error';\n"
"                globalActionStatusEl.style.display = 'block';\n"
"                setTimeout(() => {\n"
"                    if (globalActionStatusEl.className.includes('error')) {\n"
"                        globalActionStatusEl.style.display = 'none';\n"
"                        globalActionStatusEl.textContent = '';\n"
"                        globalActionStatusEl.className = 'status-message';\n"
"                    }\n"
"                }, 7000);\n"
"            }\n"
"        }\n"
"    })\n"
"    .catch(() => {\n"
"        console.error(\"Communication error saving device config.\");\n"
"        if (globalActionStatusEl) {\n"
"            globalActionStatusEl.textContent = \"Communication error saving device config.\";\n"
"            globalActionStatusEl.className = 'status-message error';\n"
"            globalActionStatusEl.style.display = 'block';\n"
"            setTimeout(() => {\n"
"                if (globalActionStatusEl.className.includes('error')) {\n"
"                    globalActionStatusEl.style.display = 'none';\n"
"                    globalActionStatusEl.textContent = '';\n"
"                    globalActionStatusEl.className = 'status-message';\n"
"                }\n"
"            }, 7000);\n"
"        }\n"
"    });\n"
"    \n"
"    return false;\n"
"}\n"
"\n"
"// Toggle API key visibility\n"
"function toggleApiKeyVisibility() {\n"
"    const apiKeyInput = document.getElementById('apiKey');\n"
"    apiKeyInput.type = apiKeyInput.type === 'password' ? 'text' : 'password';\n"
"}\n"
"\n"
"// Add new insight\n"
"function addInsight() {\n"
"    const form = document.getElementById('insight-form');\n"
"    const formData = new FormData(form);\n"
"    const globalActionStatusEl = document.getElementById('global-action-status');\n"
"\n"
"    fetch('/api/actions/save-insight', {\n"
"        method: 'POST',\n"
"        body: formData\n"
"    })\n"
"    .then(response => response.json())\n"
"    .then(data => {\n"
"        if (data && data.status === 'queued') { // Check for data and data.status, and expect 'queued' for success\n"
"            console.log(\"Add insight action successfully queued.\", data.message);\n"
"            form.reset(); // Reset form on successful queueing\n"
"            \n"
"            if (globalActionStatusEl) {\n"
"                globalActionStatusEl.textContent = data.message || \"Insight submission initiated. List will update shortly.\"; // Use message from server if available\n"
"                globalActionStatusEl.className = 'status-message info'; // Style as info\n"
"                globalActionStatusEl.style.display = 'block';\n"
"                setTimeout(() => {\n"
"                    // Clear only if the message is still the one we set\n"
"                    if (globalActionStatusEl.textContent === (data.message || \"Insight submission initiated. List will update shortly.\")) {\n"
"                        globalActionStatusEl.style.display = 'none';\n"
"                        globalActionStatusEl.textContent = '';\n"
"                        globalActionStatusEl.className = 'status-message';\n"
"                    }\n"
"                }, 5000); // Hide after 5 seconds\n"
"            }\n"
"        } else {\n"
"            // Handle actual initiation errors (e.g., queue_full, or unexpected response format)\n"
"            const errorMessage = (data && data.message) ? data.message : \"Failed to initiate save insight due to an unexpected server response.\";\n"
"            console.error(\"Failed to initiate save insight:\", errorMessage);\n"
"            if (globalActionStatusEl) {\n"
"                globalActionStatusEl.textContent = errorMessage;\n"
"                globalActionStatusEl.className = 'status-message error';\n"
"                globalActionStatusEl.style.display = 'block';\n"
"                setTimeout(() => {\n"
"                    if (globalActionStatusEl.className.includes('error')) {\n"
"                         globalActionStatusEl.style.display = 'none';\n"
"                         globalActionStatusEl.textContent = '';\n"
"                         globalActionStatusEl.className = 'status-message';\n"
"                    }\n"
"                }, 7000); // Hide after 7 seconds\n"
"            }\n"
"        }\n"
"    })\n"
"    .catch((error) => {\n"
"        console.error(\"Communication error saving insight:\", error);\n"
"        if (globalActionStatusEl) {\n"
"            globalActionStatusEl.textContent = \"Communication error saving insight.\";\n"
"            globalActionStatusEl.className = 'status-message error';\n"
"            globalActionStatusEl.style.display = 'block';\n"
"            setTimeout(() => {\n"
"                if (globalActionStatusEl.className.includes('error')) {\n"
"                    globalActionStatusEl.style.display = 'none';\n"
"                    globalActionStatusEl.textContent = '';\n"
"                    globalActionStatusEl.className = 'status-message';\n"
"                }\n"
"            }, 7000); // Hide after 7 seconds\n"
"        }\n"
"    });\n"
"    \n"
"    return false;\n"
"}\n"
"\n"
"// Delete insight\n"
"function deleteInsight(id) {\n"
"    if (!confirm('Are you sure you want to delete this insight?')) {\n"
"        return;\n"
"    }\n"
"    const globalActionStatusEl = document.getElementById('global-action-status');\n"
"    const formData = new FormData();\n"
"    formData.append('id', id);\n"
"\n"
"    fetch('/api/actions/delete-insight', { \n"
"        method: 'POST',\n"
"        body: formData\n"
"    })\n"
"    .then(response => response.json())\n"
"    .then(data => {\n"
"        if (data && data.status === 'queued') {\n"
"            console.log(\"Delete insight action successfully queued.\", data.message);\n"
"            if (globalActionStatusEl) {\n"
"                globalActionStatusEl.textContent = data.message || \"Delete insight initiated.\";\n"
"                globalActionStatusEl.className = 'status-message info';\n"
"                globalActionStatusEl.style.display = 'block';\n"
"                setTimeout(() => {\n"
"                    if (globalActionStatusEl.textContent === (data.message || \"Delete insight initiated.\")) {\n"
"                        globalActionStatusEl.style.display = 'none';\n"
"                        globalActionStatusEl.textContent = '';\n"
"                        globalActionStatusEl.className = 'status-message';\n"
"                    }\n"
"                }, 5000);\n"
"            }\n"
"        } else {\n"
"            const errorMessage = (data && data.message) ? data.message : \"Failed to initiate delete insight.\";\n"
"            console.error(\"Failed to initiate delete insight:\", errorMessage);\n"
"            if (globalActionStatusEl) {\n"
"                globalActionStatusEl.textContent = errorMessage;\n"
"                globalActionStatusEl.className = 'status-message error';\n"
"                globalActionStatusEl.style.display = 'block';\n"
"                setTimeout(() => {\n"
"                    if (globalActionStatusEl.className.includes('error')) {\n"
"                        globalActionStatusEl.style.display = 'none';\n"
"                        globalActionStatusEl.textContent = '';\n"
"                        globalActionStatusEl.className = 'status-message';\n"
"                    }\n"
"                }, 7000);\n"
"            }\n"
"        }\n"
"    })\n"
"    .catch(() => {\n"
"        console.error(\"Communication error deleting insight.\");\n"
"        if (globalActionStatusEl) {\n"
"            globalActionStatusEl.textContent = \"Communication error deleting insight.\";\n"
"            globalActionStatusEl.className = 'status-message error';\n"
"            globalActionStatusEl.style.display = 'block';\n"
"            setTimeout(() => {\n"
"                if (globalActionStatusEl.className.includes('error')) {\n"
"                    globalActionStatusEl.style.display = 'none';\n"
"                    globalActionStatusEl.textContent = '';\n"
"                    globalActionStatusEl.className = 'status-message';\n"
"                }\n"
"            }, 7000);\n"
"        }\n"
"    });\n"
"}\n"
"\n"
"// Load insights list - UI update part will be in pollApiStatus\n"
"function _updateInsightsListUI(insights) { // Renamed to indicate it's a UI updater\n"
"    const container = document.getElementById('insights-list');\n"
"    container.innerHTML = '';\n"
"    \n"
"    if (!insights || insights.length === 0) {\n"
"        container.innerHTML = '<p>No insights configured</p>';\n"
"        return;\n"
"    }\n"
"    \n"
"    const list = document.createElement('ul');\n"
"    list.className = 'insights-list';\n"
"    \n"
"    insights.forEach(insight => {\n"
"        const item = document.createElement('li');\n"
"        item.className = 'insight-item';\n"
"        item.innerHTML = `\n"
"            <button onclick=\"deleteInsight('${insight.id}')\" class=\"button danger\">Delete ${insight.title}</button>\n"
"        `;\n"
"        list.appendChild(item);\n"
"    });\n"
"    \n"
"    container.appendChild(list);\n"
"}\n"
"\n"
"// Refresh network list - UI update part will be in pollApiStatus\n"
"function _updateNetworksListUI(networks) { // Renamed\n"
"    const select = document.getElementById('ssid');\n"
"    const currentVal = select.value;\n"
"    select.innerHTML = '<option value=\"\">Select a network</option>';\n"
"    \n"
"    if (!networks || networks.length === 0) {\n"
"        select.innerHTML += '<option disabled>No networks found</option>';\n"
"        return;\n"
"    }\n"
"    \n"
"    networks.forEach(network => {\n"
"        const option = document.createElement('option');\n"
"        option.value = network.ssid;\n"
"        \n"
"        let label = network.ssid;\n"
"        if (network.rssi >= -50) label += ' (Excellent)';\n"
"        else if (network.rssi >= -60) label += ' (Good)';\n"
"        else if (network.rssi >= -70) label += ' (Fair)';\n"
"        else label += ' (Poor)';\n"
"        if (network.encrypted) label += ' 🔒';\n"
"        \n"
"        option.textContent = label;\n"
"        if (network.ssid === currentVal) {\n"
"            option.selected = true;\n"
"        }\n"
"        select.appendChild(option);\n"
"    });\n"
"}\n"
"\n"
"function requestScanNetworks() {\n"
"    fetch('/api/actions/start-wifi-scan', { method: 'POST' })\n"
"        .then(response => response.json())\n"
"        .then(data => {\n"
"            if (data.status === 'initiated') {\n"
"                console.log(\"WiFi scan initiated.\");\n"
"                // Optionally show \"Scanning...\" text near the dropdown\n"
"                document.getElementById('ssid').innerHTML = '<option>Scanning...</option>';\n"
"            } else {\n"
"                console.error(\"Failed to initiate WiFi scan: \", data.message);\n"
"                 document.getElementById('ssid').innerHTML = '<option>Scan failed to start.</option>';\n"
"            }\n"
"        })\n"
"        .catch(error => {\n"
"            console.error('Error requesting network scan:', error);\n"
"            document.getElementById('ssid').innerHTML = '<option value=\"\">Error starting scan</option>';\n"
"        });\n"
"}\n"
"\n"
"// Main function to poll /api/status and update UI\n"
"let lastProcessedAction = null; // To track last action for one-time messages like success/error screens\n"
"let lastProcessedActionMessage = \"\";\n"
"let initialDeviceConfigLoaded = false; // Flag to track initial device config load\n"
"\n"
"function pollApiStatus() {\n"
"    fetch('/api/status')\n"
"        .then(response => response.json())\n"
"        .then(data => {\n"
"            // console.log('[API_STATUS]', data);\n"
"\n"
"            const portalStatus = data.portal;\n"
"            const globalActionStatusEl = document.getElementById('global-action-status');\n"
"\n"
"            if (portalStatus && globalActionStatusEl) {\n"
"                // Handle action in progress\n"
"                if (portalStatus.action_in_progress && portalStatus.action_in_progress !== 'NONE') {\n"
"                    globalActionStatusEl.textContent = `Processing: ${portalStatus.action_in_progress.replace(/_/g, ' ').toLowerCase()}...`;\n"
"                    globalActionStatusEl.className = 'status-message info'; \n"
"                    globalActionStatusEl.style.display = 'block';\n"
"                    lastProcessedAction = null; \n"
"                }\n"
"                // Handle completed action\n"
"                else if (portalStatus.last_action_completed && portalStatus.last_action_completed !== 'NONE') {\n"
"                    const completedActionKey = portalStatus.last_action_completed + '-' + (portalStatus.last_action_status || 'UNKNOWN') + '-' + (portalStatus.last_action_message || 'NO_MSG');\n"
"\n"
"                    if (lastProcessedAction !== completedActionKey) {\n"
"                        console.log(`Action completed: ${portalStatus.last_action_completed}, Status: ${portalStatus.last_action_status}, Msg: ${portalStatus.last_action_message}`);\n"
"\n"
"                        if (portalStatus.last_action_status === 'SUCCESS') {\n"
"                            let successMsg = portalStatus.last_action_message || `${portalStatus.last_action_completed.replace(/_/g, ' ')} successful.`;\n"
"                            if (!portalStatus.last_action_message) {\n"
"                                switch (portalStatus.last_action_completed) {\n"
"                                    case 'SAVE_WIFI': successMsg = 'WiFi configuration saved. Device will attempt to connect.'; break;\n"
"                                    case 'SAVE_DEVICE_CONFIG': successMsg = 'Device configuration saved.'; break;\n"
"                                    case 'SAVE_INSIGHT': successMsg = 'New insight saved.'; break;\n"
"                                    case 'DELETE_INSIGHT': successMsg = 'Insight deleted.'; break;\n"
"                                }\n"
"                            }\n"
"                            globalActionStatusEl.textContent = successMsg;\n"
"                            globalActionStatusEl.className = 'status-message success';\n"
"                            globalActionStatusEl.style.display = 'block';\n"
"\n"
"                            // If specific success screens are desired for *other* actions (not general config), they could be added here.\n"
"                            // For now, all successes use the global status bar or success-screen for major events (like WiFi save leading to redirect)\n"
"                            if (['SAVE_WIFI'].includes(portalStatus.last_action_completed)) {\n"
"                                // For actions like SAVE_WIFI that might redirect, keep showScreen for success\n"
"                                // but ensure it's the actual 'config-saved-and-redirecting' screen if that's the flow\n"
"                                showScreen('success-screen'); // Kept for WiFi save, as it has a countdown/redirect\n"
"                            }\n"
"\n"
"                            setTimeout(() => {\n"
"                                if (globalActionStatusEl.textContent === successMsg && !globalActionStatusEl.className.includes('info')) { \n"
"                                    globalActionStatusEl.style.display = 'none';\n"
"                                    globalActionStatusEl.textContent = '';\n"
"                                    globalActionStatusEl.className = 'status-message';\n"
"                                }\n"
"                            }, 7000); \n"
"\n"
"                        } else if (portalStatus.last_action_status === 'ERROR') {\n"
"                            // No longer call showScreen('error-screen');\n"
"                            // Use globalActionStatusEl for errors\n"
"                            const errorMsgText = portalStatus.last_action_message || \"An unknown error occurred with \" + portalStatus.last_action_completed + \".\";\n"
"                            console.error(\"Action failed:\", errorMsgText);\n"
"                            if (globalActionStatusEl) {\n"
"                                globalActionStatusEl.textContent = `Error: ${errorMsgText}`;\n"
"                                globalActionStatusEl.className = 'status-message error';\n"
"                                globalActionStatusEl.style.display = 'block';\n"
"                                setTimeout(() => {\n"
"                                    if (globalActionStatusEl.className.includes('error')) {\n"
"                                        globalActionStatusEl.style.display = 'none';\n"
"                                        globalActionStatusEl.textContent = '';\n"
"                                        globalActionStatusEl.className = 'status-message';\n"
"                                    }\n"
"                                }, 10000); \n"
"                            }\n"
"                        }\n"
"                        lastProcessedAction = completedActionKey;\n"
"                    }\n"
"                } else {\n"
"                    if (globalActionStatusEl.className.includes('info') && globalActionStatusEl.textContent.startsWith('Processing:')) {\n"
"                        // If it was showing 'Processing...' and now there's no action_in_progress and no last_action_completed,\n"
"                        // it implies the processing message should be cleared if it wasn't already handled by a success/error path.\n"
"                        // This can happen if an action completes but doesn't immediately set last_action_completed or if an action was cancelled.\n"
"                        // However, most completed actions should flow through the 'last_action_completed' block.\n"
"                        // Let's be cautious and only clear if it's still showing a generic 'Processing...' and not a specific success/error.\n"
"                        // The success/error timeouts should handle clearing their specific messages.\n"
"                    } else if (globalActionStatusEl.style.display !== 'none' && !globalActionStatusEl.className.includes('success') && !globalActionStatusEl.className.includes('error')){\n"
"                        // Generic clear for info messages not handled by specific timeouts\n"
"                        // globalActionStatusEl.style.display = 'none';\n"
"                        // globalActionStatusEl.textContent = '';\n"
"                        // globalActionStatusEl.className = 'status-message';\n"
"                    }\n"
"                }\n"
"            } else if (globalActionStatusEl && portalStatus === null) { // data.portal is null\n"
"                 if (globalActionStatusEl.style.display !== 'none' && !globalActionStatusEl.className.includes('success') && !globalActionStatusEl.className.includes('error')){\n"
"                    globalActionStatusEl.style.display = 'none';\n"
"                    globalActionStatusEl.textContent = '';\n"
"                    globalActionStatusEl.className = 'status-message';\n"
"                 }\n"
"            }\n"
"\n"
"            // 2. Update WiFi Info\n"
"            if (data.wifi) {\n"
"                _updateNetworksListUI(data.wifi.networks);\n"
"                const wifiStatusEl = document.getElementById('wifi-connection-status'); // Assume element exists\n"
"                if (wifiStatusEl) {\n"
"                    wifiStatusEl.textContent = data.wifi.is_connected ? `Connected to ${data.wifi.connected_ssid} (${data.wifi.ip_address})` : \"Not Connected\";\n"
"                }\n"
"            }\n"
"\n"
"            // 3. Update Device Config Info\n"
"            if (data.device_config) {\n"
"                _updateDeviceConfigUI(data.device_config);\n"
"            }\n"
"\n"
"            // 4. Update Insights List\n"
"            if (data.insights) {\n"
"                _updateInsightsListUI(data.insights);\n"
"            }\n"
"\n"
"            // 5. Update OTA Firmware Info & UI State\n"
"            if (data.ota) {\n"
"                updateOtaUI(data.ota, data.portal);\n"
"            }\n"
"\n"
"        })\n"
"        .catch(error => {\n"
"            console.error('Error polling /api/status:', error);\n"
"            // Display a global error message, e.g., \"Lost connection to device\"\n"
"            const actionInProgressEl = document.getElementById('action-in-progress-message');\n"
"            if(actionInProgressEl) {\n"
"                actionInProgressEl.textContent = 'Error fetching status from device. Check connection.';\n"
"                actionInProgressEl.style.display = 'block';\n"
"            }\n"
"        });\n"
"}\n"
"\n"
"// Load current configuration - UI update part will be in pollApiStatus\n"
"function _updateDeviceConfigUI(config) { // Renamed\n"
"    if (!initialDeviceConfigLoaded) {\n"
"        if (config.team_id !== undefined) {\n"
"            document.getElementById('teamId').value = config.team_id;\n"
"        }\n"
"        // The API key from /api/status should be the display version (e.g., ********1234)\n"
"        // We only set it if it's the first load, otherwise user input might be overwritten.\n"
"        // The actual API key is sent on form submission, not from this display value.\n"
"        if (config.api_key_display !== undefined) { \n"
"            document.getElementById('apiKey').value = config.api_key_display;\n"
"        }\n"
"        initialDeviceConfigLoaded = true;\n"
"    }\n"
"}\n"
"\n"
"// Initialize page\n"
"document.addEventListener('DOMContentLoaded', function() {\n"
"    // Check if we need to show a specific screen based on URL hash\n"
"    // This might be less relevant if all feedback comes via /api/status poll\n"
"    const hash = window.location.hash.substr(1);\n"
"    if (hash && ['config-screen', 'success-screen'].includes(hash)) {\n"
"        showScreen(hash);\n"
"    }\n"
"    \n"
"    // // Load current configuration - Now handled by pollApiStatus\n"
"    // loadCurrentConfig();\n"
"    // // Load insights list - Now handled by pollApiStatus\n"
"    // loadInsights();\n"
"    // // Populate the networks list - Now handled by pollApiStatus initial call & requestScanNetworks\n"
"    // refreshNetworks(); \n"
"\n"
"    // OTA Update functionality\n"
"    const checkUpdateBtn = document.getElementById('check-update-btn');\n"
"    const installUpdateBtn = document.getElementById('install-update-btn');\n"
"\n"
"    if (checkUpdateBtn) {\n"
"        checkUpdateBtn.addEventListener('click', requestCheckFirmwareUpdate); // Changed to request check\n"
"    }\n"
"    if (installUpdateBtn) {\n"
"        installUpdateBtn.addEventListener('click', requestStartFirmwareUpdate); // Changed to request start\n"
"    }\n"
"\n"
"    // Initial call to pollApiStatus to populate UI, then set interval\n"
"    pollApiStatus();\n"
"    setInterval(pollApiStatus, 5000); // Poll every 5 seconds\n"
"\n"
"    // Add event listener to refresh networks button if it exists\n"
"    const refreshBtn = document.getElementById('refresh-networks-btn'); // Assuming a button with this ID\n"
"    if(refreshBtn) {\n"
"        refreshBtn.addEventListener('click', requestScanNetworks);\n"
"    }\n"
"});\n"
"\n"
"// Removed: let otaPollingIntervalId = null;\n"
"// Removed: let pollingForCheckResult = false;\n"
"\n"
"// Enum for OtaManager::UpdateStatus::State (mirror from C++)\n"
"// This helps in making the JS code more readable when checking status.\n"
"const OTA_STATUS_STATE = {\n"
"    IDLE: 0,\n"
"    CHECKING_VERSION: 1,\n"
"    DOWNLOADING: 2,\n"
"    WRITING: 3,\n"
"    SUCCESS: 4,\n"
"    ERROR_WIFI: 5,\n"
"    ERROR_HTTP_CHECK: 6,\n"
"    ERROR_HTTP_DOWNLOAD: 7,\n"
"    ERROR_JSON: 8,\n"
"    ERROR_UPDATE_BEGIN: 9,\n"
"    ERROR_UPDATE_WRITE: 10,\n"
"    ERROR_UPDATE_END: 11,\n"
"    ERROR_NO_ASSET: 12,\n"
"    ERROR_NO_SPACE: 13\n"
"};\n"
"\n"
"function requestCheckFirmwareUpdate() {\n"
"    console.log(\"Requesting firmware update check...\");\n"
"    const checkUpdateBtn = document.getElementById('check-update-btn');\n"
"    if(checkUpdateBtn) checkUpdateBtn.disabled = true;\n"
"    // UI updates for \"checking...\" will be handled by pollApiStatus based on action_in_progress\n"
"\n"
"    fetch('/api/actions/check-ota-update', { method: 'POST' })\n"
"        .then(response => response.json())\n"
"        .then(data => {\n"
"            if (data.status === 'initiated') {\n"
"                console.log('Firmware check initiated.');\n"
"                // pollApiStatus will pick up the change and reflect status\n"
"            } else {\n"
"                console.error('Failed to initiate firmware check:', data.message);\n"
"                if(checkUpdateBtn) checkUpdateBtn.disabled = false;\n"
"                // Update UI to show initiation error - pollApiStatus might also do this via last_action_status\n"
"                const updateStatusTextEl = document.getElementById('update-status-text');\n"
"                if(updateStatusTextEl) updateStatusTextEl.textContent = `Error: ${data.message || 'Could not start check.'}`;\n"
"            }\n"
"        })\n"
"        .catch(error => {\n"
"            console.error('Error requesting firmware check:', error);\n"
"            if(checkUpdateBtn) checkUpdateBtn.disabled = false;\n"
"            const updateStatusTextEl = document.getElementById('update-status-text');\n"
"            if(updateStatusTextEl) updateStatusTextEl.textContent = 'Communication error during check request.';\n"
"        });\n"
"}\n"
"\n"
"function requestStartFirmwareUpdate() {\n"
"    console.log(\"Requesting firmware update start...\");\n"
"    const installUpdateBtn = document.getElementById('install-update-btn');\n"
"    const checkUpdateBtn = document.getElementById('check-update-btn');\n"
"    if(installUpdateBtn) installUpdateBtn.disabled = true;\n"
"    if(checkUpdateBtn) checkUpdateBtn.disabled = true;\n"
"\n"
"    fetch('/api/actions/start-ota-update', { method: 'POST' })\n"
"        .then(response => response.json())\n"
"        .then(data => {\n"
"            if (data.status === 'initiated') {\n"
"                console.log('Firmware update process initiated.');\n"
"            } else {\n"
"                console.error('Failed to initiate firmware update:', data.message);\n"
"                if(installUpdateBtn) installUpdateBtn.disabled = false;\n"
"                if(checkUpdateBtn) checkUpdateBtn.disabled = false;\n"
"                const updateStatusTextEl = document.getElementById('update-status-text');\n"
"                if(updateStatusTextEl) updateStatusTextEl.textContent = `Error: ${data.message || 'Could not start update.'}`;\n"
"            }\n"
"        })\n"
"        .catch(error => {\n"
"            console.error('Error requesting firmware update start:', error);\n"
"            if(installUpdateBtn) installUpdateBtn.disabled = false;\n"
"            if(checkUpdateBtn) checkUpdateBtn.disabled = false;\n"
"            const updateStatusTextEl = document.getElementById('update-status-text');\n"
"            if(updateStatusTextEl) updateStatusTextEl.textContent = 'Communication error during update request.';\n"
"        });\n"
"}\n"
"\n"
"// Helper function to update OTA UI based on status from /api/status\n"
"function updateOtaUI(otaData, portalData) {\n"
"    const currentVersionEl = document.getElementById('current-version');\n"
"    const availableVersionEl = document.getElementById('available-version');\n"
"    const availableVersionContainerEl = document.getElementById('available-version-container');\n"
"    const releaseNotesEl = document.getElementById('release-notes');\n"
"    const updateAvailableSection = document.getElementById('update-available-section');\n"
"    const installUpdateBtn = document.getElementById('install-update-btn');\n"
"    const updateStatusTextEl = document.getElementById('update-status-text');\n"
"    const updateErrorEl = document.getElementById('update-error-message');\n"
"    const checkUpdateBtn = document.getElementById('check-update-btn');\n"
"    const updateProgressContainer = document.getElementById('update-progress-container');\n"
"    const updateProgressBar = document.getElementById('update-progress-bar');\n"
"\n"
"    // New: Display portal's OTA action message first if present\n"
"    let portalOtaMessageDisplayed = false;\n"
"    if (portalData && portalData.portal_ota_action_message) {\n"
"        if (updateStatusTextEl) updateStatusTextEl.textContent = portalData.portal_ota_action_message;\n"
"        portalOtaMessageDisplayed = true;\n"
"        // Disable buttons if portal is actively processing an OTA request\n"
"        if (portalData.action_in_progress === 'CHECK_OTA_UPDATE' || portalData.action_in_progress === 'START_OTA_UPDATE') {\n"
"            if (checkUpdateBtn) checkUpdateBtn.disabled = true;\n"
"            if (installUpdateBtn) installUpdateBtn.disabled = true;\n"
"        } else {\n"
"            // If portal_ota_action_message indicates completion of portal dispatch, re-enable based on OtaManager status below\n"
"            // This 'else' means portal's direct involvement is done, buttons will be governed by otaData\n"
"        }\n"
"    }\n"
"\n"
"    // Update displayed versions and notes - always try to update these from otaData\n"
"    if (currentVersionEl) currentVersionEl.textContent = otaData.current_firmware_version || 'N/A';\n"
"    \n"
"    // Handle visibility and content of available version\n"
"    if (availableVersionContainerEl && availableVersionEl) {\n"
"        if (otaData.update_available && otaData.available_version && otaData.available_version !== 'N/A') {\n"
"            availableVersionEl.textContent = otaData.available_version;\n"
"            availableVersionContainerEl.style.display = ''; // Show the container (default P display is block)\n"
"        } else {\n"
"            availableVersionEl.textContent = 'N/A'; // Set to N/A for consistency if hidden\n"
"            availableVersionContainerEl.style.display = 'none'; // Hide the container\n"
"        }\n"
"    }\n"
"\n"
"    if (releaseNotesEl) releaseNotesEl.textContent = otaData.update_available ? (otaData.release_notes || 'No release notes.') : '';\n"
"\n"
"    // Show/hide update available section and control install button based on otaData\n"
"    if (updateAvailableSection) updateAvailableSection.style.display = otaData.update_available ? 'block' : 'none';\n"
"    \n"
"    // Enable/disable install button: only if an update is available AND portal is not busy with an OTA action AND OtaManager is not busy\n"
"    if (installUpdateBtn) {\n"
"        installUpdateBtn.disabled = !otaData.update_available || \n"
"                                  (portalData && (portalData.action_in_progress === 'START_OTA_UPDATE' || portalData.action_in_progress === 'CHECK_OTA_UPDATE')) ||\n"
"                                  otaData.status_code === OTA_STATUS_STATE.DOWNLOADING || \n"
"                                  otaData.status_code === OTA_STATUS_STATE.WRITING;\n"
"    }\n"
"    \n"
"    // Enable/disable check update button: only if portal is not busy with an OTA action AND OtaManager is not busy\n"
"    if (checkUpdateBtn) {\n"
"        checkUpdateBtn.disabled = (portalData && (portalData.action_in_progress === 'CHECK_OTA_UPDATE' || portalData.action_in_progress === 'START_OTA_UPDATE')) ||\n"
"                                otaData.status_code === OTA_STATUS_STATE.CHECKING_VERSION || \n"
"                                otaData.status_code === OTA_STATUS_STATE.DOWNLOADING || \n"
"                                otaData.status_code === OTA_STATUS_STATE.WRITING;\n"
"    }\n"
"\n"
"    // Update OtaManager status messages and progress bar, only if portal message wasn't primary\n"
"    if (!portalOtaMessageDisplayed || (portalData && portalData.portal_ota_action_message && portalData.portal_ota_action_message.includes(\"Successfully dispatched\"))) {\n"
"        if (updateStatusTextEl) {\n"
"            // If portal message indicates successful dispatch, prefer OtaManager's message if available\n"
"            // otherwise, if no portal message, use OtaManager's message.\n"
"            let displayMessage = otaData.status_message || 'Idle';\n"
"            if (portalOtaMessageDisplayed && otaData.status_message && otaData.status_message !== \"Idle\") {\n"
"                // Prepend a note that this is OtaManager status if portal also had a successful dispatch message\n"
"                // updateStatusTextEl.textContent = \"OtaManager: \" + displayMessage;\n"
"                updateStatusTextEl.textContent = displayMessage; // Keep it simple, just show OtaManager status\n"
"            } else if (!portalOtaMessageDisplayed) {\n"
"                 updateStatusTextEl.textContent = displayMessage;\n"
"            }\n"
"            // If portalOtaMessageDisplayed was true but it was NOT a \"Successfully dispatched\" message (e.g. \"pending execution\"),\n"
"            // then the portal's message has already been set and we don't overwrite it here.\n"
"        }\n"
"    }\n"
"    \n"
"    if (updateErrorEl) {\n"
"        updateErrorEl.textContent = otaData.error_message || '';\n"
"    }\n"
"\n"
"    if (otaData.status_code === OTA_STATUS_STATE.DOWNLOADING || otaData.status_code === OTA_STATUS_STATE.WRITING) {\n"
"        if (updateProgressContainer) updateProgressContainer.style.display = 'block';\n"
"        if (updateProgressBar) updateProgressBar.style.width = `${otaData.progress || 0}%`;\n"
"        // Buttons should already be disabled by the conditions above\n"
"    } else {\n"
"        // Hide progress bar unless successfully completed (then it might show 100% briefly)\n"
"        if (otaData.status_code !== OTA_STATUS_STATE.SUCCESS && updateProgressContainer) {\n"
"             // updateProgressContainer.style.display = 'none'; // Keep visible if there's a status message to show\n"
"        }\n"
"    }\n"
"    \n"
"    if (otaData.status_code === OTA_STATUS_STATE.SUCCESS) {\n"
"        if (updateStatusTextEl) updateStatusTextEl.textContent = otaData.status_message || 'Update successful! Device will reboot.';\n"
"        if (updateProgressBar) updateProgressBar.style.width = '100%';\n"
"        if (updateProgressContainer) updateProgressContainer.style.display = 'block';\n"
"        if (installUpdateBtn) installUpdateBtn.disabled = true;\n"
"        if (checkUpdateBtn) checkUpdateBtn.disabled = true;\n"
"    }\n"
"}\n"
"\n"
"// Removed old pollUpdateStatus function as its logic is merged into pollApiStatus and updateOtaUI\n"
"/*\n"
"function pollUpdateStatus() {\n"
"    const currentVersionEl = document.getElementById('current-version');\n"
"// ... (old function content removed)\n"
"}\n"
"*/\n"
"</script>\n"
"</head>\n"
"<body>\n"
"    <div class=\"header\">\n"
"        <h1 id=\"page-title\">Configure your DeskHog</h1>\n"
"    </div>\n"
"    \n"
"    <!-- Configuration Screen -->\n"
"    <div id=\"config-screen\">\n"
"        <div id=\"global-action-status\" class=\"status-message\" style=\"display:none; margin-bottom: 1em; padding: 0.75em; border-radius: 4px; text-align: center;\"></div>\n"
"        <h2>WiFi</h2>\n"
"        <div class=\"config-section\">\n"
"            \n"
"            <form id=\"wifi-form\" onsubmit=\"return saveWifiConfig()\">\n"
"                <div class=\"form-group\">\n"
"                    <select name=\"ssid\" id=\"ssid\" required>\n"
"                        <option value=\"\">Select a network</option>\n"
"                    </select>\n"
"                </div>\n"
"                \n"
"                <div class=\"form-group\">\n"
"                    <label for=\"password\">Password</label>\n"
"                    <input type=\"password\" name=\"password\" id=\"password\">\n"
"                </div>\n"
"\n"
"                <p class=\"tip\">If your network doesn't need a password, just leave this blank.</p>\n"
"                \n"
"                <div class=\"button-container\">\n"
"                    <button type=\"submit\">Save WiFi</button>\n"
"                </div>\n"
"            </form>\n"
"            \n"
"            <div class=\"button-container\">\n"
"                <button type=\"button\" onclick=\"refreshNetworks()\">Refresh Network List</button>\n"
"            </div>\n"
"        </div>\n"
"\n"
"        <h2>API configuration</h2>\n"
"\n"
"        <div class=\"config-section\">\n"
"            <form id=\"device-form\" onsubmit=\"return saveDeviceConfig()\">\n"
"                <div class=\"form-group\">\n"
"                    <label for=\"teamId\">Team ID</label>\n"
"                    <input type=\"text\" name=\"teamId\" id=\"teamId\" min=\"-1\" required>\n"
"                </div>\n"
"                \n"
"                <div class=\"form-group\">\n"
"                    <label for=\"apiKey\">API key</label>\n"
"                    <input type=\"text\" name=\"apiKey\" id=\"apiKey\">\n"
"                </div>\n"
"                \n"
"                <div class=\"button-container\">\n"
"                    <button type=\"submit\">Save API configuration</button>\n"
"                </div>\n"
"            </form>\n"
"        </div>\n"
"\n"
"        <h2>Insights</h2>\n"
"\n"
"        <div class=\"config-section\">\n"
"            <form id=\"insight-form\" onsubmit=\"return addInsight()\">\n"
"                <div class=\"form-group\">\n"
"                    <label for=\"insightId\">Add new insight ID</label>\n"
"                    <input type=\"text\" name=\"insightId\" id=\"insightId\"  required>\n"
"                </div>\n"
"                \n"
"                <div class=\"button-container\">\n"
"                    <button type=\"submit\">Add Insight</button>\n"
"                </div>\n"
"            </form>\n"
"\n"
"        \n"
"        </div>\n"
"\n"
"        <div class=\"config-section\">\n"
"            <label for=\"insightId\">Stored insights</label>\n"
"            <div id=\"insights-list\">\n"
"                <!-- Will be populated by JavaScript -->\n"
"                 <ul>\n"
"                    <li>\n"
"                        <button>Delete [an insight]</button>\n"
"                    </li>\n"
"                 </ul>\n"
"            </div>\n"
"        </div>\n"
"\n"
"        <!-- Firmware Update Section -->\n"
"        <h2>Firmware update</h2>\n"
"        <div class=\"config-section\">\n"
"            <p>Current version: <span id=\"current-version\">Checking...</span></p>\n"
"            <p id=\"available-version-container\">Available version: <span id=\"available-version\">N/A</span></p>\n"
"            <div class=\"button-container\">\n"
"                <button type=\"button\" id=\"check-update-btn\">Check for updates</button>\n"
"            </div>\n"
"            <div id=\"update-available-section\" style=\"display:none;\">\n"
"                <h4>Update details:</h4>\n"
"                <pre id=\"release-notes\" class=\"release-notes-box\"></pre>\n"
"                <div class=\"button-container\">\n"
"                    <button type=\"button\" id=\"install-update-btn\">Install update</button>\n"
"                </div>\n"
"            </div>\n"
"            <div id=\"update-status-container\" style=\"margin-top: 15px;\">\n"
"                <p id=\"update-status-text\"></p>\n"
"                <div class=\"progress\" id=\"update-progress-container\" style=\"display:none;\">\n"
"                    <div id=\"update-progress-bar\" class=\"progress-bar\" style=\"width: 0%;\"></div>\n"
"                </div>\n"
"                <p id=\"update-error-message\" class=\"error-message\"></p>\n"
"            </div>\n"
"        </div>\n"
"        <!-- End Firmware Update Section -->\n"
"\n"
"    </div>\n"
"    \n"
"    <!-- Success Screen -->\n"
"    <div id=\"success-screen\" class=\"container hidden\">\n"
"        <h2>Configuration saved</h2>\n"
"        <p>Your changes have been saved successfully.</p>\n"
"        <p>If you changed WiFi settings, the device will now attempt to connect to the new network.</p>\n"
"        \n"
"        <div class=\"progress\">\n"
"            <div id=\"progress-bar\" class=\"progress-bar\"></div>\n"
"        </div>\n"
"        \n"
"        <p>Redirecting in <span id=\"countdown\">10</span> seconds...</p>\n"
"    </div>\n"
"    \n"
"    <footer>People who are really serious about software should make their own hardware. - Alan Kay</footer>\n"
"\n"
"</body>\n"
"</html>";
