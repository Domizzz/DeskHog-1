// Generated file - do not edit!
// Source: html/portal.html
#pragma once
#include <pgmspace.h>
static const char PORTAL_HTML[] PROGMEM = "<!DOCTYPE html>\n"
"<html>\n"
"<head>\n"
"    <meta charset=\"UTF-8\">\n"
"    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n"
"    <title>Configure DeskHog</title>\n"
"    <style>\n"
":root {\n"
"    background-color: #E5E7DF;\n"
"    --border-color: #DCDED4;\n"
"    --container-color: #F3F4F0;\n"
"    --button-border: #CCCCCC;\n"
"    --button-border-hover: #AAA;\n"
"    --radius: 8px;\n"
"    --input-color: #FFF;\n"
"    --panel-color: #FFF;\n"
"    --label-color: #a0a0a0;\n"
"    --button-shadow: #E1DDDD;\n"
"    --default-font: system-ui, -apple-system, sans-serif; \n"
"    font-family: var(--default-font);\n"
"\n"
"}\n"
"\n"
"body { \n"
"    margin: 0; \n"
"    padding: 1rem; \n"
"    background-color: var(--container-color); \n"
"    color: #333; \n"
"    max-width: 70ch;\n"
"    margin-left: auto;\n"
"    margin-right: auto;\n"
"    border: 1px solid var(--border-color);\n"
"}\n"
"\n"
".tip {\n"
"    margin-top: 0px;\n"
"    font-weight: 400;\n"
"    font-size: 1rem;\n"
"}\n"
"\n"
".config-section {\n"
"    background-color: var(--panel-color);\n"
"    padding: 1rem;\n"
"    border-radius: var(--radius);\n"
"    margin-bottom: 1rem;\n"
"    border: 1px solid var(--border-color);\n"
"}\n"
"\n"
"\n"
"h1, h2 { color: #000000;\n"
"}\n"
"\n"
"h1 {\n"
"    font-weight: 700;\n"
"    font-size: 1.5rem;\n"
"\n"
"}\n"
"\n"
"h2 {\n"
"    font-weight: 600;\n"
"    font-size: 1.1rem;\n"
"    margin-bottom: 0.5rem;\n"
"}\n"
"\n"
".form-group { margin-bottom: 15px; }\n"
"label { \n"
"    display: block; \n"
"    margin-bottom: 0.5rem; \n"
"    font-weight: 600;\n"
"}\n"
"input[type='text'], input[type='password'] { \n"
"    width: 100%; \n"
"    padding: 8px; \n"
"    border: 1px solid #ddd; \n"
"    border-radius: 8px; \n"
"    box-sizing: border-box; \n"
"    font-size: 1rem;\n"
"}\n"
".button-container { \n"
"    margin-top: 15px; \n"
"    text-align: center; \n"
"}\n"
"button, select { \n"
"    display: inline-block; \n"
"    width: 100%;\n"
"    font-size: 16px;\n"
"    font-weight: 600;\n"
"    height: 40px;\n"
"    text-decoration: none; \n"
"    background-color: var(--input-color);\n"
"    border: 1px solid var(--button-border);\n"
"    border-radius: var(--radius); \n"
"    cursor: pointer; \n"
"    padding: 0 16px;\n"
"\n"
"    box-shadow: 0 4px 0 0 var(--button-shadow),\n"
"                0 5px 0 0 var(--button-border);\n"
"    color: inherit;\n"
"    -webkit-tap-highlight-color: transparent;\n"
"}\n"
"\n"
"input, select {\n"
"    height: 40px;\n"
"}\n"
"\n"
"button:active {\n"
"    background-color: #DCDDD9;\n"
"}\n"
"\n"
"ul {\n"
"    list-style: none;\n"
"    padding: 0;\n"
"    margin: 0;\n"
"}\n"
"\n"
"li {\n"
"    margin-bottom: 1rem;\n"
"}\n"
"\n"
"li:last-child {\n"
"    margin-bottom: 0;\n"
"}\n"
"\n"
"footer { \n"
"    text-align: center; \n"
"    margin-top: 4rem; \n"
"    color: #777; \n"
"    font-size: 0.8em; \n"
"}\n"
".network-list {\n"
"    max-height: 200px;\n"
"    overflow-y: auto;\n"
"    border: 1px solid #ddd;\n"
"    border-radius: 4px;\n"
"    margin-bottom: 15px;\n"
"}\n"
".network-item {\n"
"    padding: 8px 15px;\n"
"    border-bottom: 1px solid #eee;\n"
"    cursor: pointer;\n"
"}\n"
".network-item:hover {\n"
"    background-color: #f5f5f5;\n"
"}\n"
".network-item.selected {\n"
"    background-color: #e0f0ff;\n"
"}\n"
"\n"
".lock-icon {\n"
"    margin-left: 5px;\n"
"}\n"
".success-icon {\n"
"    color: #28a745;\n"
"    font-size: 48px;\n"
"    text-align: center;\n"
"    margin: 20px 0;\n"
"}\n"
".progress {\n"
"    height: 4px;\n"
"    background-color: #e9ecef;\n"
"    border-radius: 2px;\n"
"    margin: 20px 0;\n"
"    overflow: hidden;\n"
"}\n"
".progress-bar {\n"
"    height: 100%;\n"
"    background-color: #0066cc;\n"
"    width: 0%;\n"
"    transition: width 10s linear;\n"
"}\n"
".hidden {\n"
"    display: none;\n"
"}\n"
"\n"
"select {\n"
"    -webkit-appearance: none;\n"
"    -moz-appearance: none;\n"
"    appearance: none;\n"
"    background-image: url(\"data:image/svg+xml;charset=US-ASCII,%3Csvg xmlns='http://www.w3.org/2000/svg' width='24' height='24' viewBox='0 0 24 24' fill='none' stroke='%23333333' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'%3E%3Cpolyline points='6 9 12 15 18 9'%3E%3C/polyline%3E%3C/svg%3E\");\n"
"    background-repeat: no-repeat;\n"
"    background-position: right 0.7rem top 50%;\n"
"    background-size: 1rem auto;\n"
"    padding-right: 2rem;\n"
"    background-color: var(--input-color);\n"
"    font-family: var(--default-font);\n"
"}\n"
"\n"
"select::-ms-expand {\n"
"    display: none;\n"
"}\n"
"</style>\n"
"    <script>\n"
"function showScreen(screenId) {\n"
"    const screens = ['config-screen', 'success-screen', 'error-screen'];\n"
"    screens.forEach(id => {\n"
"        document.getElementById(id).classList.add('hidden');\n"
"    });\n"
"    document.getElementById(screenId).classList.remove('hidden');\n"
"    \n"
"    // Update page title\n"
"    let title = \"DeskHog Configuration\";\n"
"    if (screenId === 'success-screen') title = \"Configuration Saved\";\n"
"    else if (screenId === 'error-screen') title = \"Configuration Error\";\n"
"    document.getElementById('page-title').textContent = title;\n"
"    \n"
"    // Start countdown if success screen\n"
"    if (screenId === 'success-screen') {\n"
"        startCountdown();\n"
"        document.getElementById('progress-bar').style.width = '100%';\n"
"    }\n"
"}\n"
"\n"
"// Handle WiFi form submission\n"
"function saveWifiConfig() {\n"
"    const form = document.getElementById('wifi-form');\n"
"    const formData = new FormData(form);\n"
"    \n"
"    fetch('/save-wifi', {\n"
"        method: 'POST',\n"
"        body: formData\n"
"    })\n"
"    .then(response => response.json())\n"
"    .then(data => {\n"
"        if (data.success) {\n"
"            showScreen('success-screen');\n"
"        } else {\n"
"            showScreen('error-screen');\n"
"        }\n"
"    })\n"
"    .catch(() => {\n"
"        showScreen('error-screen');\n"
"    });\n"
"    \n"
"    return false; // Prevent default form submission\n"
"}\n"
"\n"
"// Handle device config form submission\n"
"function saveDeviceConfig() {\n"
"    const form = document.getElementById('device-form');\n"
"    const formData = new FormData(form);\n"
"    \n"
"    fetch('/save-device-config', {\n"
"        method: 'POST',\n"
"        body: formData\n"
"    })\n"
"    .then(response => response.json())\n"
"    .then(data => {\n"
"        if (data.success) {\n"
"            showScreen('success-screen');\n"
"        } else {\n"
"            showScreen('error-screen');\n"
"        }\n"
"    })\n"
"    .catch(() => {\n"
"        showScreen('error-screen');\n"
"    });\n"
"    \n"
"    return false;\n"
"}\n"
"\n"
"// Toggle API key visibility\n"
"function toggleApiKeyVisibility() {\n"
"    const apiKeyInput = document.getElementById('apiKey');\n"
"    apiKeyInput.type = apiKeyInput.type === 'password' ? 'text' : 'password';\n"
"}\n"
"\n"
"// Add new insight\n"
"function addInsight() {\n"
"    const form = document.getElementById('insight-form');\n"
"    const formData = new FormData(form);\n"
"    \n"
"    fetch('/save-insight', {\n"
"        method: 'POST',\n"
"        body: formData\n"
"    })\n"
"    .then(response => response.json())\n"
"    .then(data => {\n"
"        if (data.success) {\n"
"            form.reset();\n"
"            loadInsights();\n"
"        } else {\n"
"            showScreen('error-screen');\n"
"        }\n"
"    })\n"
"    .catch(() => {\n"
"        showScreen('error-screen');\n"
"    });\n"
"    \n"
"    return false;\n"
"}\n"
"\n"
"// Delete insight\n"
"function deleteInsight(id) {\n"
"    if (!confirm('Are you sure you want to delete this insight?')) {\n"
"        return;\n"
"    }\n"
"    \n"
"    fetch('/delete-insight', {\n"
"        method: 'POST',\n"
"        headers: {\n"
"            'Content-Type': 'application/json',\n"
"        },\n"
"        body: JSON.stringify({ id: id })\n"
"    })\n"
"    .then(response => response.json())\n"
"    .then(data => {\n"
"        if (data.success) {\n"
"            loadInsights();\n"
"        } else {\n"
"            showScreen('error-screen');\n"
"        }\n"
"    })\n"
"    .catch(() => {\n"
"        showScreen('error-screen');\n"
"    });\n"
"}\n"
"\n"
"// Load insights list\n"
"function loadInsights() {\n"
"    fetch('/get-insights')\n"
"    .then(response => response.json())\n"
"    .then(data => {\n"
"        const container = document.getElementById('insights-list');\n"
"        container.innerHTML = '';\n"
"        \n"
"        if (data.insights.length === 0) {\n"
"            container.innerHTML = '<p>No insights configured</p>';\n"
"            return;\n"
"        }\n"
"        \n"
"        const list = document.createElement('ul');\n"
"        list.className = 'insights-list';\n"
"        \n"
"        data.insights.forEach(insight => {\n"
"            const item = document.createElement('li');\n"
"            item.className = 'insight-item';\n"
"            item.innerHTML = `\n"
"                <button onclick=\"deleteInsight('${insight.id}')\" class=\"button danger\">Delete ${insight.title}</button>\n"
"            `;\n"
"            list.appendChild(item);\n"
"        });\n"
"        \n"
"        container.appendChild(list);\n"
"    })\n"
"    .catch(error => {\n"
"        console.error('Error loading insights:', error);\n"
"    });\n"
"}\n"
"\n"
"// Refresh network list\n"
"function refreshNetworks() {\n"
"    fetch('/scan-networks')\n"
"    .then(response => response.json())\n"
"    .then(data => {\n"
"        const select = document.getElementById('ssid');\n"
"        select.innerHTML = '<option value=\"\">Select a network</option>';\n"
"        \n"
"        if (!data.networks || data.networks.length === 0) {\n"
"            select.innerHTML += '<option disabled>No networks found</option>';\n"
"            return;\n"
"        }\n"
"        \n"
"        data.networks.forEach(network => {\n"
"            const option = document.createElement('option');\n"
"            option.value = network.ssid;\n"
"            \n"
"            let label = network.ssid;\n"
"            \n"
"            // Add signal strength indicator\n"
"            if (network.rssi >= -50) {\n"
"                label += ' (Excellent)';\n"
"            } else if (network.rssi >= -60) {\n"
"                label += ' (Good)';\n"
"            } else if (network.rssi >= -70) {\n"
"                label += ' (Fair)';\n"
"            } else {\n"
"                label += ' (Poor)';\n"
"            }\n"
"            \n"
"            // Add lock icon for encrypted networks\n"
"            if (network.encrypted) {\n"
"                label += ' 🔒';\n"
"            }\n"
"            \n"
"            option.textContent = label;\n"
"            select.appendChild(option);\n"
"        });\n"
"    })\n"
"    .catch(error => {\n"
"        console.error('Error refreshing networks:', error);\n"
"        const select = document.getElementById('ssid');\n"
"        select.innerHTML = '<option value=\"\">Error loading networks</option>';\n"
"    });\n"
"}\n"
"\n"
"// Start countdown on success screen\n"
"function startCountdown() {\n"
"    let seconds = 10;\n"
"    const countdownEl = document.getElementById('countdown');\n"
"    \n"
"    const interval = setInterval(() => {\n"
"        seconds--;\n"
"        countdownEl.textContent = seconds;\n"
"        \n"
"        if (seconds <= 0) {\n"
"            clearInterval(interval);\n"
"            window.location.href = '/';\n"
"        }\n"
"    }, 1000);\n"
"}\n"
"\n"
"// Load current configuration\n"
"function loadCurrentConfig() {\n"
"    fetch('/get-device-config')\n"
"    .then(response => response.json())\n"
"    .then(data => {\n"
"        if (data.teamId !== undefined) {\n"
"            document.getElementById('teamId').value = data.teamId;\n"
"        }\n"
"        if (data.apiKey) {\n"
"            document.getElementById('apiKey').value = data.apiKey;\n"
"        }\n"
"    })\n"
"    .catch(error => {\n"
"        console.error('Error loading device config:', error);\n"
"    });\n"
"}\n"
"\n"
"// Initialize page\n"
"document.addEventListener('DOMContentLoaded', function() {\n"
"    // Check if we need to show a specific screen based on URL hash\n"
"    const hash = window.location.hash.substr(1);\n"
"    if (hash && ['config-screen', 'success-screen', 'error-screen'].includes(hash)) {\n"
"        showScreen(hash);\n"
"    }\n"
"    \n"
"    // Load current configuration\n"
"    loadCurrentConfig();\n"
"    \n"
"    // Load insights list\n"
"    loadInsights();\n"
"\n"
"    // Populate the networks list\n"
"    refreshNetworks();\n"
"\n"
"    // OTA Update functionality\n"
"    const checkUpdateBtn = document.getElementById('check-update-btn');\n"
"    const installUpdateBtn = document.getElementById('install-update-btn');\n"
"\n"
"    if (checkUpdateBtn) {\n"
"        checkUpdateBtn.addEventListener('click', checkFirmwareUpdate);\n"
"    }\n"
"    if (installUpdateBtn) {\n"
"        installUpdateBtn.addEventListener('click', startFirmwareUpdate);\n"
"    }\n"
"\n"
"    // Initial check for firmware version on page load\n"
"    checkFirmwareUpdate(); \n"
"});\n"
"\n"
"let otaPollingIntervalId = null;\n"
"\n"
"// Enum for OtaManager::UpdateStatus::State (mirror from C++)\n"
"// This helps in making the JS code more readable when checking status.\n"
"const OTA_STATUS_STATE = {\n"
"    IDLE: 0,\n"
"    CHECKING_VERSION: 1,\n"
"    DOWNLOADING: 2,\n"
"    WRITING: 3,\n"
"    SUCCESS: 4,\n"
"    ERROR_WIFI: 5,\n"
"    ERROR_HTTP_CHECK: 6,\n"
"    ERROR_HTTP_DOWNLOAD: 7,\n"
"    ERROR_JSON: 8,\n"
"    ERROR_UPDATE_BEGIN: 9,\n"
"    ERROR_UPDATE_WRITE: 10,\n"
"    ERROR_UPDATE_END: 11,\n"
"    ERROR_NO_ASSET: 12,\n"
"    ERROR_NO_SPACE: 13\n"
"};\n"
"\n"
"function checkFirmwareUpdate() {\n"
"    console.log(\"Checking for firmware updates...\");\n"
"    const currentVersionEl = document.getElementById('current-version');\n"
"    const availableVersionEl = document.getElementById('available-version');\n"
"    const releaseNotesEl = document.getElementById('release-notes');\n"
"    const updateAvailableSection = document.getElementById('update-available-section');\n"
"    const installUpdateBtn = document.getElementById('install-update-btn');\n"
"    const updateStatusTextEl = document.getElementById('update-status-text');\n"
"    const updateErrorEl = document.getElementById('update-error-message');\n"
"    const checkUpdateBtn = document.getElementById('check-update-btn');\n"
"\n"
"    if(updateStatusTextEl) updateStatusTextEl.textContent = 'Checking for updates...';\n"
"    if(updateErrorEl) updateErrorEl.textContent = '';\n"
"    if(updateAvailableSection) updateAvailableSection.style.display = 'none';\n"
"    if(installUpdateBtn) installUpdateBtn.disabled = true;\n"
"    if(checkUpdateBtn) checkUpdateBtn.disabled = true;\n"
"\n"
"    fetch('/check-update')\n"
"        .then(response => response.json())\n"
"        .then(data => {\n"
"            if (currentVersionEl) currentVersionEl.textContent = data.currentVersion || 'N/A';\n"
"            if (data.error && data.error.length > 0) {\n"
"                console.error('Error checking for update:', data.error);\n"
"                if(updateErrorEl) updateErrorEl.textContent = `Error: ${data.error}`;\n"
"                if(updateStatusTextEl) updateStatusTextEl.textContent = 'Check failed.';\n"
"                return;\n"
"            }\n"
"\n"
"            if (data.updateAvailable) {\n"
"                console.log('Update available:', data.availableVersion);\n"
"                if (availableVersionEl) availableVersionEl.textContent = data.availableVersion;\n"
"                if (releaseNotesEl) releaseNotesEl.textContent = data.releaseNotes || 'No release notes provided.';\n"
"                if (updateAvailableSection) updateAvailableSection.style.display = 'block';\n"
"                if (installUpdateBtn) installUpdateBtn.disabled = false;\n"
"                if(updateStatusTextEl) updateStatusTextEl.textContent = 'Update available!';\n"
"            } else {\n"
"                console.log('No update available or already up-to-date.');\n"
"                if (availableVersionEl) availableVersionEl.textContent = 'N/A (Up to date)';\n"
"                if(updateStatusTextEl) updateStatusTextEl.textContent = 'Your firmware is up to date.';\n"
"            }\n"
"        })\n"
"        .catch(error => {\n"
"            console.error('Failed to fetch update status:', error);\n"
"            if (currentVersionEl) currentVersionEl.textContent = 'Error';\n"
"            if (availableVersionEl) availableVersionEl.textContent = 'Error';\n"
"            if(updateErrorEl) updateErrorEl.textContent = 'Failed to communicate with device to check for updates.';\n"
"            if(updateStatusTextEl) updateStatusTextEl.textContent = 'Error checking updates.';\n"
"        })\n"
"        .finally(() => {\n"
"            if(checkUpdateBtn) checkUpdateBtn.disabled = false;\n"
"        });\n"
"}\n"
"\n"
"function startFirmwareUpdate() {\n"
"    console.log(\"Starting firmware update...\");\n"
"    const installUpdateBtn = document.getElementById('install-update-btn');\n"
"    const checkUpdateBtn = document.getElementById('check-update-btn');\n"
"    const updateStatusTextEl = document.getElementById('update-status-text');\n"
"    const updateErrorEl = document.getElementById('update-error-message');\n"
"    const updateProgressContainer = document.getElementById('update-progress-container');\n"
"    const updateProgressBar = document.getElementById('update-progress-bar');\n"
"\n"
"    if (installUpdateBtn) installUpdateBtn.disabled = true;\n"
"    if (checkUpdateBtn) checkUpdateBtn.disabled = true; // Disable check button during update\n"
"    if (updateErrorEl) updateErrorEl.textContent = '';\n"
"    if (updateStatusTextEl) updateStatusTextEl.textContent = 'Initiating update...';\n"
"    if (updateProgressContainer) updateProgressContainer.style.display = 'block';\n"
"    if (updateProgressBar) updateProgressBar.style.width = '0%';\n"
"\n"
"    // Stop any previous polling\n"
"    if (otaPollingIntervalId) {\n"
"        clearInterval(otaPollingIntervalId);\n"
"        otaPollingIntervalId = null;\n"
"    }\n"
"\n"
"    fetch('/start-update', { method: 'POST' })\n"
"        .then(response => response.json())\n"
"        .then(data => {\n"
"            if (data.success) {\n"
"                console.log('Update process started successfully.');\n"
"                if (updateStatusTextEl) updateStatusTextEl.textContent = 'Update in progress...';\n"
"                // Start polling for status\n"
"                otaPollingIntervalId = setInterval(pollUpdateStatus, 2000); // Poll every 2 seconds\n"
"            } else {\n"
"                console.error('Failed to start update process:', data.message);\n"
"                if (updateErrorEl) updateErrorEl.textContent = `Error: ${data.message || 'Could not start update.'}`;\n"
"                if (updateStatusTextEl) updateStatusTextEl.textContent = 'Update failed to start.';\n"
"                if (installUpdateBtn) installUpdateBtn.disabled = false; // Re-enable if start failed\n"
"                if (checkUpdateBtn) checkUpdateBtn.disabled = false;\n"
"                if (updateProgressContainer) updateProgressContainer.style.display = 'none';\n"
"            }\n"
"        })\n"
"        .catch(error => {\n"
"            console.error('Error starting firmware update:', error);\n"
"            if (updateErrorEl) updateErrorEl.textContent = 'Communication error when trying to start the update.';\n"
"            if (updateStatusTextEl) updateStatusTextEl.textContent = 'Update start error.';\n"
"            if (installUpdateBtn) installUpdateBtn.disabled = false;\n"
"            if (checkUpdateBtn) checkUpdateBtn.disabled = false;\n"
"            if (updateProgressContainer) updateProgressContainer.style.display = 'none';\n"
"        });\n"
"}\n"
"\n"
"function pollUpdateStatus() {\n"
"    const updateStatusTextEl = document.getElementById('update-status-text');\n"
"    const updateErrorEl = document.getElementById('update-error-message');\n"
"    const updateProgressBar = document.getElementById('update-progress-bar');\n"
"    const updateProgressContainer = document.getElementById('update-progress-container');\n"
"    const installUpdateBtn = document.getElementById('install-update-btn');\n"
"    const checkUpdateBtn = document.getElementById('check-update-btn');\n"
"\n"
"    fetch('/update-status')\n"
"        .then(response => response.json())\n"
"        .then(data => {\n"
"            console.log('OTA Status:', data);\n"
"            if (updateStatusTextEl) updateStatusTextEl.textContent = data.message || 'Fetching status...';\n"
"            if (updateProgressBar) updateProgressBar.style.width = `${data.progress || 0}%`;\n"
"            if (updateProgressContainer && updateProgressContainer.style.display === 'none' && data.progress > 0 && data.progress < 100) {\n"
"                updateProgressContainer.style.display = 'block';\n"
"            }\n"
"\n"
"            // Check if the update is complete or has errored\n"
"            if (data.status === OTA_STATUS_STATE.SUCCESS) {\n"
"                console.log('Update successful!');\n"
"                if (updateStatusTextEl) updateStatusTextEl.textContent = data.message || 'Update successful! Device will reboot.';\n"
"                if (updateProgressBar) updateProgressBar.style.width = '100%';\n"
"                if (otaPollingIntervalId) clearInterval(otaPollingIntervalId);\n"
"                // Don't re-enable buttons, device is rebooting.\n"
"                alert('Firmware update successful! The device will now reboot with the new version. This page may become unresponsive.');\n"
"            } else if (data.status >= OTA_STATUS_STATE.ERROR_WIFI) { // Any error state\n"
"                console.error('Update failed:', data.message);\n"
"                if (updateErrorEl) updateErrorEl.textContent = `Error: ${data.message || 'An unknown error occurred.'}`;\n"
"                if (updateStatusTextEl) updateStatusTextEl.textContent = 'Update failed.';\n"
"                if (otaPollingIntervalId) clearInterval(otaPollingIntervalId);\n"
"                if (installUpdateBtn) installUpdateBtn.disabled = false; // Re-enable buttons on failure\n"
"                if (checkUpdateBtn) checkUpdateBtn.disabled = false;\n"
"            } else if (data.status === OTA_STATUS_STATE.IDLE && otaPollingIntervalId !== null && data.message.includes(\"No update available\")){\n"
"                // This case could happen if a check completed while polling was active from a previous attempt\n"
"                // and cleared the \"update available\" state. Or if an update was aborted and status reset.\n"
"                // For now, just stop polling if we hit IDLE unexpectedly during an update.\n"
"                console.warn(\"OTA process became IDLE unexpectedly during update polling.\");\n"
"                if (otaPollingIntervalId) clearInterval(otaPollingIntervalId);\n"
"                if (installUpdateBtn) installUpdateBtn.disabled = false;\n"
"                if (checkUpdateBtn) checkUpdateBtn.disabled = false;\n"
"                 if (!updateErrorEl.textContent) { // don't overwrite a more specific error\n"
"                    updateErrorEl.textContent = \"Update process was interrupted or finished unexpectedly.\";\n"
"                }\n"
"            }\n"
"        })\n"
"        .catch(error => {\n"
"            console.error('Error polling update status:', error);\n"
"            if (updateErrorEl) updateErrorEl.textContent = 'Error fetching update status from device.';\n"
"            // Potentially stop polling on comms error to avoid spamming\n"
"            if (otaPollingIntervalId) clearInterval(otaPollingIntervalId);\n"
"            if (installUpdateBtn) installUpdateBtn.disabled = false;\n"
"            if (checkUpdateBtn) checkUpdateBtn.disabled = false;\n"
"        });\n"
"}\n"
"</script>\n"
"</head>\n"
"<body>\n"
"    <div class=\"header\">\n"
"        <h1 id=\"page-title\">Configure your DeskHog</h1>\n"
"    </div>\n"
"    \n"
"    <!-- Configuration Screen -->\n"
"    <div id=\"config-screen\">\n"
"        <h2>WiFi</h2>\n"
"        <div class=\"config-section\">\n"
"            \n"
"            <form id=\"wifi-form\" onsubmit=\"return saveWifiConfig()\">\n"
"                <div class=\"form-group\">\n"
"                    <select name=\"ssid\" id=\"ssid\" required>\n"
"                        <option value=\"\">Select a network</option>\n"
"                    </select>\n"
"                </div>\n"
"                \n"
"                <div class=\"form-group\">\n"
"                    <label for=\"password\">Password</label>\n"
"                    <input type=\"password\" name=\"password\" id=\"password\">\n"
"                </div>\n"
"\n"
"                <p class=\"tip\">If your network doesn't need a password, just leave this blank.</p>\n"
"                \n"
"                <div class=\"button-container\">\n"
"                    <button type=\"submit\">Save WiFi</button>\n"
"                </div>\n"
"            </form>\n"
"            \n"
"            <div class=\"button-container\">\n"
"                <button type=\"button\" onclick=\"refreshNetworks()\">Refresh Network List</button>\n"
"            </div>\n"
"        </div>\n"
"\n"
"        <h2>API configuration</h2>\n"
"\n"
"        <div class=\"config-section\">\n"
"            <form id=\"device-form\" onsubmit=\"return saveDeviceConfig()\">\n"
"                <div class=\"form-group\">\n"
"                    <label for=\"teamId\">Team ID</label>\n"
"                    <input type=\"text\" name=\"teamId\" id=\"teamId\" min=\"-1\" required>\n"
"                </div>\n"
"                \n"
"                <div class=\"form-group\">\n"
"                    <label for=\"apiKey\">API key</label>\n"
"                    <input type=\"text\" name=\"apiKey\" id=\"apiKey\">\n"
"                </div>\n"
"                \n"
"                <div class=\"button-container\">\n"
"                    <button type=\"submit\">Save API configuration</button>\n"
"                </div>\n"
"            </form>\n"
"        </div>\n"
"\n"
"        <h2>Insights</h2>\n"
"\n"
"        <div class=\"config-section\">\n"
"            <form id=\"insight-form\" onsubmit=\"return addInsight()\">\n"
"                <div class=\"form-group\">\n"
"                    <label for=\"insightId\">Add new insight ID</label>\n"
"                    <input type=\"text\" name=\"insightId\" id=\"insightId\"  required>\n"
"                </div>\n"
"                \n"
"                <div class=\"button-container\">\n"
"                    <button type=\"submit\">Add Insight</button>\n"
"                </div>\n"
"            </form>\n"
"\n"
"        \n"
"        </div>\n"
"\n"
"        <div class=\"config-section\">\n"
"            <label for=\"insightId\">Stored insights</label>\n"
"            <div id=\"insights-list\">\n"
"                <!-- Will be populated by JavaScript -->\n"
"                 <ul>\n"
"                    <li>\n"
"                        <button>Delete [an insight]</button>\n"
"                    </li>\n"
"                 </ul>\n"
"            </div>\n"
"        </div>\n"
"\n"
"        <!-- Firmware Update Section -->\n"
"        <h2>Firmware Update</h2>\n"
"        <div class=\"config-section\">\n"
"            <p>Current Version: <span id=\"current-version\">Checking...</span></p>\n"
"            <p>Available Version: <span id=\"available-version\">N/A</span></p>\n"
"            <div class=\"button-container\">\n"
"                <button type=\"button\" id=\"check-update-btn\">Check for Updates</button>\n"
"            </div>\n"
"            <div id=\"update-available-section\" style=\"display:none;\">\n"
"                <h4>Update Details:</h4>\n"
"                <pre id=\"release-notes\" class=\"release-notes-box\"></pre>\n"
"                <div class=\"button-container\">\n"
"                    <button type=\"button\" id=\"install-update-btn\">Install Update</button>\n"
"                </div>\n"
"            </div>\n"
"            <div id=\"update-status-container\" style=\"margin-top: 15px;\">\n"
"                <p id=\"update-status-text\"></p>\n"
"                <div class=\"progress\" id=\"update-progress-container\" style=\"display:none;\">\n"
"                    <div id=\"update-progress-bar\" class=\"progress-bar\" style=\"width: 0%;\"></div>\n"
"                </div>\n"
"                <p id=\"update-error-message\" class=\"error-message\"></p>\n"
"            </div>\n"
"        </div>\n"
"        <!-- End Firmware Update Section -->\n"
"\n"
"    </div>\n"
"    \n"
"    <!-- Success Screen -->\n"
"    <div id=\"success-screen\" class=\"container hidden\">\n"
"        <h2>Configuration Saved</h2>\n"
"        <p>Your changes have been saved successfully.</p>\n"
"        <p>If you changed WiFi settings, the device will now attempt to connect to the new network.</p>\n"
"        \n"
"        <div class=\"progress\">\n"
"            <div id=\"progress-bar\" class=\"progress-bar\"></div>\n"
"        </div>\n"
"        \n"
"        <p>Redirecting in <span id=\"countdown\">10</span> seconds...</p>\n"
"    </div>\n"
"    \n"
"    <!-- Error Screen -->\n"
"    <div id=\"error-screen\" class=\"container hidden\">\n"
"        <h2>Error Saving Configuration</h2>\n"
"        <p>There was an error saving your configuration.</p>\n"
"        <p>Please try again.</p>\n"
"        \n"
"        <div class=\"button-container\">\n"
"            <button type=\"button\" onclick=\"showScreen('config-screen')\">Back</button>\n"
"        </div>\n"
"    </div>\n"
"    \n"
"    <footer>People who are really serious about software should make their own hardware. - Alan Kay</footer>\n"
"\n"
"</body>\n"
"</html>";
